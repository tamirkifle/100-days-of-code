// Problem 1
// Multiples of 3 and 5
// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

// Find the sum of all the multiples of 3 or 5 below 1000.
let answer;

function sumOfMultiples(num, limit) {
    let sum = 0, i = 1;

    while (num * i < limit) {
        sum += num * i++;
    }
    return sum;
}

function commonPrimeFactor(array) {
    let common = new Set();
    array.forEach(e => {
        primeFactors(e).forEach(factor => common.add(factor));
    });
    return Array.from(common);
}

function primeFactors(num) {
    let i = 2;
    let factors = [];
    while (num !== 1) {
        if (num % i === 0) {
            factors.push(i);
            while (num % i === 0) {
                num /= i;
            }
            i++;
            factors.forEach(factor => {
                if (i % factor === 0) {
                    i++;
                }
            }
            );
        }
        else {
            i++;
        }
    }
    return factors;
}


answer = sumOfMultiples(3, 1000) + sumOfMultiples(5, 1000) - sumOfMultiples(commonPrimeFactor([3, 5]).reduce((x, y) => x * y), 1000);



// Problem 2
// Even Fibonacci numbers

// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

let num = 1;
let prevNum = 0;
let sum = 0;
let temp = 0;
while (num < 4000000) {
    if (num % 2 === 0) {
        sum += num;
    }
    temp = num;
    num = prevNum + num;
    prevNum = temp;
}

answer = sum;

// Problem 3

// Largest prime factor
// The prime factors of 13195 are 5, 7, 13 and 29.

// What is the largest prime factor of the number 600851475143 ?


answer = primeFactors(600851475143).slice(-1)[0];

// Problem 4

// Largest palindrome product
// A palindromic number reads the same both ways.The largest palindrome made from the product of two 2 - digit numbers is 9009 = 91 Ã— 99.

// Find the largest palindrome made from the product of two 3 - digit numbers.

function isPalindrome(num) {
    let isPalindrome = false;
    let numString = String(num);
    let left, right;
    let chNum = numString.length;
    left = Math.floor(chNum / 2) - 1;
    if (chNum % 2 === 0) {
        right = left + 1;
    }
    else {
        right = left + 2;
    }
    while (left >= 0 && right < numString.length) {
        if (numString[left] !== numString[right]) {
            break;
        }
        if (left === 0 && right === (numString.length - 1)) {
            isPalindrome = true;
        }
        left--; right++;
    }
    return isPalindrome;

}

function isPalindrome2(num) {
    let stringNum = String(num);
    if (stringNum.split("").reverse().join("") === stringNum) {
        return true;
    }
    else {
        return false;
    }
}

let maxPalindrome = -1;
let current;
for (let i = 999; i > 99; i--) {
    for (let j = i; j > 99; j--) {
        current = j * i;
        if (current > maxPalindrome && isPalindrome2(current)) {
            maxPalindrome = current;
        }

    }
}

answer = [maxPalindrome];


// Problem 5

// Smallest multiple
// 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

// What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20 ?

let set = new Set();
for (let index = 2; index <= 20; index++) {
    primeFactors(index).forEach(e => {
        let multiple = e;
        while (multiple <= 20) {
            multiple *= e;
        }
        set.add(multiple / e);
    });
}


answer = Array.from(set).reduce((x, y) => x * y);








console.log(answer);


